// Copyright (C) 2024 Evan McBroom
//
// Cryptography API: Next Generation (cng) which includes
// - Base cryptographic (bcrypt) primitives for in-memory keys
// - New cryptographic (ncrypt) key storage and retrieval
//
// References:
// Kerr, Kenny. "Applying Cryptography Using The CNG API In Windows Vista." MSDN Magazine, 1 Oct. 2007
//
#pragma once
#include <phnt_windows.h>

#pragma push_macro("WINAPI_PARTITION_DESKTOP")
#pragma push_macro("WINAPI_PARTITION_SYSTEM")
#undef WINAPI_PARTITION_DESKTOP
#undef WINAPI_PARTITION_SYSTEM
#include "cpdk/bcrypt_provider.h"
#include "cpdk/ncrypt_provider.h"
#pragma pop_macro("WINAPI_PARTITION_SYSTEM")
#pragma pop_macro("WINAPI_PARTITION_DESKTOP")
#include "ntasn1.h"
#include "schannel.h"
#include <bcrypt.h>
#include <ncrypt.h>
#include <wincrypt.h>

// After SDK 10.0.16299.0 Microsoft removed the VSM related macros
// and definitions and replaced them with an alternative solution
// using VBS. The original VSM macros and types were readded for
// backwards compatability.
#if (NTDDI_VERSION >= NTDDI_WIN10_RS3)
    // NCrypt generic memory descriptor
    #define NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS 54

    // Key attestation claim type. Note that Microsoft has changed
    // this value to mean NCRYPT_CLAIM_VBS_KEY_ATTESTATION_STATEMENT
    // in current distributions of the SDK.
    #define NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT 0x00000004

    // Macros for the _NCRYPT_VSM_KEY_ATTESTATION_* types
    #define NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0                       0
    #define NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION          NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0
    #define NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0              0
    #define NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0
#endif

#ifdef __cplusplus
extern "C" {
#endif
    
DECLARE_HANDLE(NCRYPT_DESCRIPTOR_HANDLE);
DECLARE_HANDLE(NCRYPT_MSG_HANDLE);
DECLARE_HANDLE(NCRYPT_PROTECTOR_HANDLE);
DECLARE_HANDLE(NCRYPT_PROTPROV_HANDLE);
DECLARE_HANDLE(NCRYPT_STREAM_HANDLE);

// Bcrypt
struct _BCRYPT_ALGORITHM_HEADER;
struct _BCRYPT_HASH_HEADER;
struct _BCRYPT_HASH_TO_SYMCRYPT;
struct _BCRYPT_KEY_HEADER;
struct _BCRYPT_OBJECT_HEADER;
struct _BCRYPT_SECRET_HEADER;
union _INTERFACE_VARIANT;

// Ncrypt
struct _CACHED_NCRYPT_PROVIDER;
struct _NCRYPT_KEY_PROTECTION_FUNCTION_TABLE;
struct _NCRYPT_PROVIDER_CACHE;
struct _NCRYPT_ROUTER_KEY;
struct _NCRYPT_ROUTER_PROVIDER;
struct _NCRYPT_ROUTER_SECRET;
struct _NCRYPT_SSL_HASH;
struct _NCRYPT_SSL_KEY;
struct _NCRYPT_SSL_PROVIDER;
struct _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
struct _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
struct NCRYPT_BIT_BLOB;
struct NCRYPT_ATTRIBUTE;
struct NCRYPT_ATTR_TYPE_VALUE;
struct NCRYPT_ALGORITHM_IDENTIFIER;
struct NCRYPT_AES_GCM_PARAMETERS;
struct NCRYPT_CMS_COMBINER_RECIPIENT_INFO;
struct NCRYPT_CMS_CONTENT_INFO;
struct NCRYPT_CMS_ENCRYPTED_CONTENT_INFO;
struct NCRYPT_CMS_ENVELOPED_DATA;
struct NCRYPT_CMS_ENVELOPED_ENCODE_INFO;
struct NCRYPT_CMS_KEK_ENCODE_INFO;
struct NCRYPT_CMS_KEK_RECIPIENT_INFO;
struct NCRYPT_CMS_KEY_AGREE_ENCODE_INFO;
struct NCRYPT_CMS_KEY_AGREE_RECIPIENT_INFO;
struct NCRYPT_CMS_KEY_TRANS_ENCODE_INFO;
struct NCRYPT_CMS_KEY_TRANS_RECIPIENT_INFO;
struct NCRYPT_CMS_ORIGINATOR_IDENTIFIER;
struct NCRYPT_CMS_ORIGINATOR_INFO;
struct NCRYPT_CMS_OTHER_RECIPIENT_INFO;
struct NCRYPT_CMS_PASSWORD_RECIPIENT_INFO;
struct NCRYPT_CMS_RECIPIENT_ENCODE_INFO;
struct NCRYPT_CMS_RECIPIENT_ENCRYPTED_KEY;
struct NCRYPT_CMS_RECIPIENT_IDENTIFIER;
struct NCRYPT_CMS_RECIPIENT_INFO;
struct NCRYPT_CMS_RECIPIENT_KEY_IDENTIFIER;
struct NCRYPT_DESCRIPTOR_OBJECT;
struct NCRYPT_ISSUER_SERIAL_NUMBER;
struct NCRYPT_NAME_VALUE;
struct NCRYPT_NAME_VALUE_AND_COMBINE;
struct NCRYPT_NAME_VALUE_AND_COMBINER;
struct NCRYPT_PROTECT_SETTINGS_INFO;
struct NCRYPT_PROTECT_STREAM_INFO;
struct NCRYPT_PROTECT_STREAM_INFO_EX;
struct NCRYPT_PROTECTION_DESCRIPTOR_INFO;
struct NCRYPT_PUBLIC_KEY_INFO;
struct NCRYPT_REG_VALUE_DEF;
struct NCRYPT_SET_OF_ANY;
struct NCRYPT_STREAM_OBJECT;

typedef struct _LOADED_PROVIDER_HANDLE {
    PWCHAR pszImage;
    HINSTANCE* hImage;
    DWORD dwRefCount;
    struct _LOADED_PROVIDER_HANDLE* pNext;
} LOADED_PROVIDER_HANDLE, *PLOADED_PROVIDER_HANDLE;

typedef struct NCRYPT_ISSUER_SERIAL_NUMBER {
    CRYPT_INTEGER_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
} NCRYPT_ISSUER_SERIAL_NUMBER, *PNCRYPT_ISSUER_SERIAL_NUMBER;

typedef struct NCRYPT_CMS_RECIPIENT_IDENTIFIER {
    DWORD dwChoice;
    union {
        NCRYPT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
        CRYPT_INTEGER_BLOB KeyId;
    };
} NCRYPT_CMS_RECIPIENT_IDENTIFIER, *PNCRYPT_CMS_RECIPIENT_IDENTIFIER;

typedef struct NCRYPT_ALGORITHM_IDENTIFIER {
    CRYPT_INTEGER_BLOB ObjId;
    CRYPT_INTEGER_BLOB Parameters;
    LPCVOID pOidInfo;
} NCRYPT_ALGORITHM_IDENTIFIER, *PNCRYPT_ALGORITHM_IDENTIFIER;

typedef struct NCRYPT_CMS_KEY_TRANS_RECIPIENT_INFO {
    DWORD dwVersion;
    NCRYPT_CMS_RECIPIENT_IDENTIFIER RecipientId;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
    CRYPT_INTEGER_BLOB EncryptedKey;
} NCRYPT_CMS_KEY_TRANS_RECIPIENT_INFO, *PNCRYPT_CMS_KEY_TRANS_RECIPIENT_INFO;

typedef struct NCRYPT_BIT_BLOB {
    ULONG cbData;
    PBYTE pbData;
    ULONG cUnusedBits;
} NCRYPT_BIT_BLOB, *PNCRYPT_BIT_BLOB;

typedef struct NCRYPT_PUBLIC_KEY_INFO {
    NCRYPT_ALGORITHM_IDENTIFIER Algorithm;
    NCRYPT_BIT_BLOB PublicKey;
} NCRYPT_PUBLIC_KEY_INFO, *PNCRYPT_PUBLIC_KEY_INFO;

typedef struct NCRYPT_CMS_ORIGINATOR_IDENTIFIER {
    DWORD dwChoice;
    union {
        NCRYPT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
        CRYPT_INTEGER_BLOB KeyId;
        NCRYPT_PUBLIC_KEY_INFO PublicKeyInfo;
    };
} NCRYPT_CMS_ORIGINATOR_IDENTIFIER, *PNCRYPT_CMS_ORIGINATOR_IDENTIFIER;

typedef struct NCRYPT_CMS_RECIPIENT_ENCRYPTED_KEY {
    NCRYPT_CMS_RECIPIENT_IDENTIFIER RecipientId;
    CRYPT_INTEGER_BLOB EncryptedKey;
} NCRYPT_CMS_RECIPIENT_ENCRYPTED_KEY, *PNCRYPT_CMS_RECIPIENT_ENCRYPTED_KEY;

typedef struct NCRYPT_CMS_KEY_AGREE_RECIPIENT_INFO {
    DWORD dwVersion;
    NCRYPT_CMS_ORIGINATOR_IDENTIFIER OriginatorId;
    CRYPT_INTEGER_BLOB UserKeyingMaterial;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
    ULONG cRecipientEncryptedKey;
    PNCRYPT_CMS_RECIPIENT_ENCRYPTED_KEY rgRecipientEncryptedKey;
} NCRYPT_CMS_KEY_AGREE_RECIPIENT_INFO, *PNCRYPT_CMS_KEY_AGREE_RECIPIENT_INFO;

typedef struct NCRYPT_ATTR_TYPE_VALUE {
    CRYPT_INTEGER_BLOB Type;
    CRYPT_INTEGER_BLOB Value;
} NCRYPT_ATTR_TYPE_VALUE, *PNCRYPT_ATTR_TYPE_VALUE;

typedef struct NCRYPT_CMS_RECIPIENT_KEY_IDENTIFIER {
    CRYPT_INTEGER_BLOB KeyId;
    FILETIME Date;
    PNCRYPT_ATTR_TYPE_VALUE pOtherKeyAttribute;
} NCRYPT_CMS_RECIPIENT_KEY_IDENTIFIER, *PNCRYPT_CMS_RECIPIENT_KEY_IDENTIFIER;

typedef struct NCRYPT_CMS_KEK_RECIPIENT_INFO {
    DWORD dwVersion;
    NCRYPT_CMS_RECIPIENT_KEY_IDENTIFIER KEKId;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
    CRYPT_INTEGER_BLOB EncryptedKey;
} NCRYPT_CMS_KEK_RECIPIENT_INFO, *PNCRYPT_CMS_KEK_RECIPIENT_INFO;

typedef struct NCRYPT_CMS_PASSWORD_RECIPIENT_INFO {
    DWORD dwVersion;
    NCRYPT_ALGORITHM_IDENTIFIER KeyDerivationAlgId;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
    CRYPT_INTEGER_BLOB EncryptedKey;
} NCRYPT_CMS_PASSWORD_RECIPIENT_INFO, *PNCRYPT_CMS_PASSWORD_RECIPIENT_INFO;

typedef struct NCRYPT_CMS_OTHER_RECIPIENT_INFO {
    CRYPT_INTEGER_BLOB Type;
    CRYPT_INTEGER_BLOB Value;
} NCRYPT_CMS_OTHER_RECIPIENT_INFO, *PNCRYPT_CMS_OTHER_RECIPIENT_INFO;

typedef struct NCRYPT_CMS_RECIPIENT_INFO {
    DWORD dwChoice;
    union {
        NCRYPT_CMS_KEY_TRANS_RECIPIENT_INFO KeyTransRecipientInfo;
        NCRYPT_CMS_KEY_AGREE_RECIPIENT_INFO KeyAgreeRecipientInfo;
        NCRYPT_CMS_KEK_RECIPIENT_INFO KEKRecipientInfo;
        NCRYPT_CMS_PASSWORD_RECIPIENT_INFO PasswordRecipientInfo;
        NCRYPT_CMS_OTHER_RECIPIENT_INFO OtherRecipientInfo;
    };
} NCRYPT_CMS_RECIPIENT_INFO, *PNCRYPT_CMS_RECIPIENT_INFO;

typedef struct NCRYPT_NAME_VALUE {
    LPWSTR wszName;
    LPWSTR wszValue;
    LPCVOID pvInfo;
    DWORD dwInfoType;
} NCRYPT_NAME_VALUE, *PNCRYPT_NAME_VALUE;

typedef struct _NCRYPT_KEY_PROTECTION_FUNCTION_TABLE {
    BCRYPT_INTERFACE_VERSION Version;
    // clang-format off
    LONG (* OpenProtector)(NCRYPT_PROTPROV_HANDLE*, const WCHAR*, ULONG);
    LONG (* CloseProtector)(NCRYPT_PROTPROV_HANDLE);
    LONG (* KeyProtect)(NCRYPT_PROTPROV_HANDLE, const PNCRYPT_NAME_VALUE, const UCHAR*, ULONG, const NCRYPT_ALLOC_PARA*, HWND*, PNCRYPT_CMS_RECIPIENT_INFO*, ULONG);
    LONG (* KeyUnprotect)(NCRYPT_PROTPROV_HANDLE, const PNCRYPT_CMS_RECIPIENT_INFO, const NCRYPT_ALLOC_PARA*, HWND*, PUCHAR*, PULONG, ULONG);
    // clang-format on
} NCRYPT_KEY_PROTECTION_FUNCTION_TABLE, *PNCRYPT_KEY_PROTECTION_FUNCTION_TABLE;

typedef union _INTERFACE_VARIANT {
    BCRYPT_CIPHER_FUNCTION_TABLE Cipher;
    BCRYPT_HASH_FUNCTION_TABLE Hash;
    BCRYPT_ASYMMETRIC_ENCRYPTION_FUNCTION_TABLE AssymmetricEncryption;
    BCRYPT_SECRET_AGREEMENT_FUNCTION_TABLE SecretAgreement;
    BCRYPT_SIGNATURE_FUNCTION_TABLE Signature;
    BCRYPT_RNG_FUNCTION_TABLE RNG;
    BCRYPT_KEY_DERIVATION_FUNCTION_TABLE KeyDerivation;
    NCRYPT_KEY_STORAGE_FUNCTION_TABLE KeyStorage;
    NCRYPT_KEY_PROTECTION_FUNCTION_TABLE KeyProtection;
    NCRYPT_SSL_FUNCTION_TABLE SSL;
} INTERFACE_VARIANT, *PINTERFACE_VARIANT;

typedef struct _BCRYPT_ALGORITHM_HEADER {
    ULONG cbLength;
    DWORD dwMagic;
    DWORD dwFlags;
    ULONG cbBlock;
    DWORD dwRefCount;
    HANDLE hSubAlgorithm;
    BOOL fDispatchMode;
    DWORD dwInterface;
    PLOADED_PROVIDER_HANDLE pLoadedProviderHandle;
    INTERFACE_VARIANT Interface;
} BCRYPT_ALGORITHM_HEADER, *PBCRYPT_ALGORITHM_HEADER;

typedef struct _BCRYPT_HASH_HEADER {
    ULONG cbLength;
    DWORD dwMagic;
    PBCRYPT_ALGORITHM_HEADER pAlgorithm;
    HANDLE hSubHash;
    HANDLE hSubOuterHash;
    PBYTE pbAllocatedBuffer;
} BCRYPT_HASH_HEADER, *PBCRYPT_HASH_HEADER;

struct _SYMCRYPT_MAC;
typedef struct _SYMCRYPT_MAC* PSYMCRYPT_MAC;
typedef struct _BCRYPT_HASH_TO_SYMCRYPT {
    LPCWSTR lpBcryptHash;
    const PSYMCRYPT_MAC* pMacAlgorithm;
} BCRYPT_HASH_TO_SYMCRYPT, *PBCRYPT_HASH_TO_SYMCRYPT;

typedef struct _BCRYPT_KEY_HEADER {
    ULONG cbLength;
    DWORD dwMagic;
    PBCRYPT_ALGORITHM_HEADER pAlgorithm;
    HANDLE hSubKey;
    PBYTE pbAllocatedBuffer;
} BCRYPT_KEY_HEADER, *PBCRYPT_KEY_HEADER;

typedef struct _BCRYPT_OBJECT_HEADER {
    ULONG cbLength;
    DWORD dwMagic;
    PBCRYPT_ALGORITHM_HEADER pAlgorithm;
    HANDLE hSubObject;
} BCRYPT_OBJECT_HEADER, *PBCRYPT_OBJECT_HEADER;

typedef struct _BCRYPT_SECRET_HEADER {
    ULONG cbLength;
    DWORD dwMagic;
    PBCRYPT_ALGORITHM_HEADER pAlgorithm;
    HANDLE hSubSecret;
} BCRYPT_SECRET_HEADER, *PBCRYPT_SECRET_HEADER;

typedef struct _CACHED_NCRYPT_PROVIDER {
    struct _CACHED_NCRYPT_PROVIDER* pNextEntry;
    LPWSTR pwszProviderName;
    HANDLE hProvider;
} CACHED_NCRYPT_PROVIDER, *PCACHED_NCRYPT_PROVIDER;

typedef struct _NCRYPT_PROVIDER_CACHE {
    PCACHED_NCRYPT_PROVIDER pHeadCachedProv;
    PCACHED_NCRYPT_PROVIDER pTailCachedProv;
    ULONG cCachedNCryptProvs;
    RTL_RESOURCE CachedNCryptRWLock;
} NCRYPT_PROVIDER_CACHE, *PNCRYPT_PROVIDER_CACHE;

typedef struct _NCRYPT_ROUTER_PROVIDER {
    DWORD dwMagic;
    LONG RefCount;
    PLOADED_PROVIDER_HANDLE pLoadedProviderHandle;
    NCRYPT_KEY_STORAGE_FUNCTION_TABLE Interface;
    HANDLE hSubProvider;
    LPWSTR pszName;
} NCRYPT_ROUTER_PROVIDER, *PNCRYPT_ROUTER_PROVIDER;

typedef struct _NCRYPT_ROUTER_KEY {
    DWORD dwMagic;
    PNCRYPT_ROUTER_PROVIDER pProvider;
    HANDLE hSubKey;
    LPWSTR pszName;
} NCRYPT_ROUTER_KEY, *PNCRYPT_ROUTER_KEY;

typedef struct _NCRYPT_ROUTER_SECRET {
    DWORD dwMagic;
    PNCRYPT_ROUTER_PROVIDER pProvider;
    HANDLE hSubSecret;
} NCRYPT_ROUTER_SECRET, *PNCRYPT_ROUTER_SECRET;

typedef struct _NCRYPT_SSL_PROVIDER {
    ULONG cbLength;
    DWORD dwMagic;
    DWORD dwFlags;
    LONG fFreedProvider;
    LONG RefCount;
    struct _LOADED_PROVIDER_HANDLE* pLoadedProviderHandle;
    NCRYPT_SSL_FUNCTION_TABLE Interface;
    ULONGLONG hSubProvider;
} NCRYPT_SSL_PROVIDER, *PNCRYPT_SSL_PROVIDER;

typedef struct _NCRYPT_SSL_HASH {
    ULONG cbLength;
    DWORD dwMagic;
    DWORD dwFlags;
    LONG RefCount;
    HANDLE hSubHash;
    PNCRYPT_SSL_PROVIDER pProvider;
} NCRYPT_SSL_HASH, *PNCRYPT_SSL_HASH;

typedef struct _NCRYPT_SSL_KEY {
    ULONG cbLength;
    DWORD dwMagic;
    DWORD dwFlags;
    LONG RefCount;
    HANDLE hSubKey;
    PNCRYPT_SSL_PROVIDER pProvider;
} NCRYPT_SSL_KEY, *PNCRYPT_SSL_KEY;

struct _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;

/// <summary>
/// This was included in SDK 10.0.16299.0 and later removed and
/// replaced by replaced by _NCRYPT_VBS_KEY_ATTESTATION_STATEMENT.
/// </summary>
typedef struct _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT {
    ULONG Magic; // {'I', 'M', 'S', 'V'} - 'VSMI' for VSM Isolated
    ULONG Version; // Set to NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION
    ULONG cbSignature; // Secure kernel signature over the isolation report
    ULONG cbReport; // Key isolation report from the secure kernel
    ULONG cbAttributes; // Attributes of the isolated key including public key blob
    // UCHAR Signature[cbSignature]    -- Secure kernel signature of the report
    // UCHAR Report[cbReport]          -- Secure kernel report including hash of Attributes
    // UCHAR Attributes[cbAttributes]  -- Trustlet-reported attributes of the key
} NCRYPT_VSM_KEY_ATTESTATION_STATEMENT, *PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT;

/// <summary>
/// This was included in SDK 10.0.16299.0 and later removed.
/// </summary>
#pragma warning(disable : 4214) // bit fields type other than int
typedef struct _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS {
    ULONG Version; // Set to NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0
    ULONGLONG TrustletId; // Trustlet type
    ULONG MinSvn; // Minimum acceptable trustlet SVN, 0 if don't care
    ULONG FlagsMask; // Which of NCRYPT_ISOLATED_KEY_ flags to check
    ULONG FlagsExpected; // Expected values of flags inside the mask
    ULONG AllowDebugging : 1; // Is it okay for the trustlet to be debugged, 0 if no
    ULONG Reserved : 31; // Future extension area, must be 0
} NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS, *PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
#pragma warning(default : 4214) // bit fields type other than int

typedef struct NCRYPT_AES_GCM_PARAMETERS {
    CRYPT_INTEGER_BLOB Nonce;
    ULONG cbICVlen;
} NCRYPT_AES_GCM_PARAMETERS, *PNCRYPT_AES_GCM_PARAMETERS;

typedef struct NCRYPT_ATTRIBUTE {
    CRYPT_INTEGER_BLOB Type;
    ULONG cValue;
    PCRYPT_INTEGER_BLOB rgValue;
} NCRYPT_ATTRIBUTE, *PNCRYPT_ATTRIBUTE;

typedef struct NCRYPT_CMS_COMBINER_RECIPIENT_INFO {
    DWORD dwVersion;
    ULONG cRecipientInfo;
    PNCRYPT_CMS_RECIPIENT_INFO rgRecipientInfo;
    NCRYPT_ALGORITHM_IDENTIFIER KeyDerivationAlgId;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
    CRYPT_INTEGER_BLOB EncryptedKey;
} NCRYPT_CMS_COMBINER_RECIPIENT_INFO, *PNCRYPT_CMS_COMBINER_RECIPIENT_INFO;

typedef struct NCRYPT_CMS_CONTENT_INFO {
    CRYPT_INTEGER_BLOB ContentType;
    CRYPT_INTEGER_BLOB Content;
} NCRYPT_CMS_CONTENT_INFO, *PNCRYPT_CMS_CONTENT_INFO;

typedef struct NCRYPT_CMS_ENCRYPTED_CONTENT_INFO {
    CRYPT_INTEGER_BLOB ContentType;
    NCRYPT_ALGORITHM_IDENTIFIER EncryptionAlgId;
    CRYPT_INTEGER_BLOB EncryptedContent;
} NCRYPT_CMS_ENCRYPTED_CONTENT_INFO, *PNCRYPT_CMS_ENCRYPTED_CONTENT_INFO;

typedef struct NCRYPT_SET_OF_ANY {
    ULONG cValue;
    PCRYPT_INTEGER_BLOB rgValue;
} NCRYPT_SET_OF_ANY, *PNCRYPT_SET_OF_ANY;

typedef struct NCRYPT_CMS_ORIGINATOR_INFO {
    NCRYPT_SET_OF_ANY Certificates;
    NCRYPT_SET_OF_ANY Crls;
} NCRYPT_CMS_ORIGINATOR_INFO, *PNCRYPT_CMS_ORIGINATOR_INFO;

typedef struct NCRYPT_CMS_ENVELOPED_DATA {
    DWORD dwVersion;
    NCRYPT_CMS_ORIGINATOR_INFO Originator;
    ULONG cRecipientInfo;
    PNCRYPT_CMS_RECIPIENT_INFO rgRecipientInfo;
    NCRYPT_CMS_ENCRYPTED_CONTENT_INFO EncryptedContentInfo;
    ULONG cUnprotectedAttributes;
    PNCRYPT_ATTRIBUTE rgUnprotectedAttributes;
} NCRYPT_CMS_ENVELOPED_DATA, *PNCRYPT_CMS_ENVELOPED_DATA;

typedef struct NCRYPT_CMS_KEY_TRANS_ENCODE_INFO {
    ULONG cbSize;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
    NCRYPT_CMS_RECIPIENT_IDENTIFIER RecipientId;
} NCRYPT_CMS_KEY_TRANS_ENCODE_INFO, *PNCRYPT_CMS_KEY_TRANS_ENCODE_INFO;

typedef struct NCRYPT_CMS_KEY_AGREE_ENCODE_INFO {
    ULONG cbSize;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
    NCRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgId;
    NCRYPT_CMS_RECIPIENT_IDENTIFIER RecipientId;
} NCRYPT_CMS_KEY_AGREE_ENCODE_INFO, *PNCRYPT_CMS_KEY_AGREE_ENCODE_INFO;

typedef struct NCRYPT_CMS_KEK_ENCODE_INFO {
    ULONG cbSize;
    NCRYPT_CMS_RECIPIENT_KEY_IDENTIFIER KEKId;
    NCRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgId;
} NCRYPT_CMS_KEK_ENCODE_INFO, *PNCRYPT_CMS_KEK_ENCODE_INFO;

typedef struct NCRYPT_CMS_RECIPIENT_ENCODE_INFO {
    DWORD dwType;
    union {
        NCRYPT_CMS_KEY_TRANS_ENCODE_INFO KeyTransRecipient;
        NCRYPT_CMS_KEY_AGREE_ENCODE_INFO KeyAgreeRecipient;
        NCRYPT_CMS_KEK_ENCODE_INFO KekRecipient;
    };
} NCRYPT_CMS_RECIPIENT_ENCODE_INFO, *PNCRYPT_CMS_RECIPIENT_ENCODE_INFO;

typedef struct NCRYPT_CMS_ENVELOPED_ENCODE_INFO {
    ULONG cbSize;
    PCRYPT_INTEGER_BLOB pContentType;
    PNCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgId;
    PCRYPT_INTEGER_BLOB pContentEncryptionKey;
    ULONG cUnprotectedAttributes;
    PNCRYPT_ATTRIBUTE rgUnprotectedAttributes;
    ULONG cRecipient;
    PNCRYPT_CMS_RECIPIENT_ENCODE_INFO rgRecipient;
} NCRYPT_CMS_ENVELOPED_ENCODE_INFO, *PNCRYPT_CMS_ENVELOPED_ENCODE_INFO;

typedef struct NCRYPT_PROTECTION_DESCRIPTOR_INFO {
    ULONG cProtector;
    NCRYPT_NAME_VALUE_AND_COMBINER* rgProtector;
} NCRYPT_PROTECTION_DESCRIPTOR_INFO, *PNCRYPT_PROTECTION_DESCRIPTOR_INFO;

typedef struct NCRYPT_DESCRIPTOR_OBJECT {
    ULONG cbSize;
    DWORD dwFlags;
    PNCRYPT_PROTECTION_DESCRIPTOR_INFO pDescriptor;
    LPWSTR wszDescriptorString;
    NCRYPT_MSG_HANDLE hMsg;
    const PNCRYPT_CMS_ENVELOPED_DATA pEnvelopedData;
} NCRYPT_DESCRIPTOR_OBJECT, *PNCRYPT_DESCRIPTOR_OBJECT;

typedef struct NCRYPT_NAME_VALUE_AND_COMBINER {
    ULONG cItem;
    PNCRYPT_NAME_VALUE rgItem;
    ULONG cRecipient;
    LPCVOID pvRecipientInfo;
} NCRYPT_NAME_VALUE_AND_COMBINER, *PNCRYPT_NAME_VALUE_AND_COMBINER;

typedef struct NCRYPT_PROTECT_SETTINGS_INFO {
    LPWSTR wszCEKAlgId;
    const PASN1_OID_INFO pCEKAlgInfo;
    LPWSTR wszRecoveryAgent;
    NCRYPT_DESCRIPTOR_HANDLE hRADescriptor;
} NCRYPT_PROTECT_SETTINGS_INFO, *PNCRYPT_PROTECT_SETTINGS_INFO;

typedef struct NCRYPT_PROTECT_STREAM_INFO {
    // clang-format off
    LONG (* pfnStreamOutput)(LPVOID, const UCHAR*, ULONG, LONG);
    // clang-format on
    LPVOID pvCallbackCtxt;
} NCRYPT_PROTECT_STREAM_INFO, *PNCRYPT_PROTECT_STREAM_INFO;

typedef struct NCRYPT_PROTECT_STREAM_INFO_EX {
    // clang-format off
    LONG (* pfnStreamOutput)(LPVOID, const UCHAR*, ULONG, NCRYPT_DESCRIPTOR_HANDLE, LONG);
    // clang-format on
    LPVOID pvCallbackCtxt;
} NCRYPT_PROTECT_STREAM_INFO_EX, *PNCRYPT_PROTECT_STREAM_INFO_EX;

typedef struct NCRYPT_REG_VALUE_DEF {
    LPCWSTR wszName;
    DWORD dwType;
    LONG fOptional;
    ULONG cbSizeof;
    ULONG cbExtraData;
    ULONG cbOffset;
    ULONG cbSizeOffset;
} NCRYPT_REG_VALUE_DEF, *PNCRYPT_REG_VALUE_DEF;

typedef struct NCRYPT_STREAM_OBJECT {
    SIZE_T cbSize;
    const NCRYPT_ALLOC_PARA* pMemPara;
    union {
        NCRYPT_PROTECT_STREAM_INFO StreamInfo;
        NCRYPT_PROTECT_STREAM_INFO_EX StreamInfoEx;
    };
    LONG fEx;
    LONG fProtect;
    LONG fFinal;
    ULONGLONG cbStreamCount;
    HWND* hWnd;
    DWORD dwFlags;
    NCRYPT_MSG_HANDLE hMsg;
    NCRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgId;
    CRYPT_INTEGER_BLOB ContentEncryptionKey;
    NCRYPT_DESCRIPTOR_OBJECT* pDescriptorObject;
    PBYTE pbContent;
    ULONG cbContent;
    ULONG cbContentLength;
    PBYTE pbTagLength;
    ULONG cbTagLength;
    PBYTE pbContentEncryptKey;
    ULONG cbContentEncryptKey;
} NCRYPT_STREAM_OBJECT, *PNCRYPT_STREAM_OBJECT;

#ifdef __cplusplus
} // Closes extern "C" above

namespace Bcrypt {
    // Enumerations
    using HASH_OPERATION_TYPE = BCRYPT_HASH_OPERATION_TYPE;
    using MULTI_OPERATION_TYPE = BCRYPT_MULTI_OPERATION_TYPE;

    // Unions
    using INTERFACE_VARIANT = _INTERFACE_VARIANT;

    using ALGORITHM_HEADER = _BCRYPT_ALGORITHM_HEADER;
    using ALGORITHM_IDENTIFIER = _BCRYPT_ALGORITHM_IDENTIFIER;
    using ASYMMETRIC_ENCRYPTION_FUNCTION_TABLE = _BCRYPT_ASYMMETRIC_ENCRYPTION_FUNCTION_TABLE;
    using AUTHENTICATED_CIPHER_MODE_INFO = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
    using Buffer = _BCryptBuffer;
    using BufferDesc = _BCryptBufferDesc;
    using CIPHER_FUNCTION_TABLE = _BCRYPT_CIPHER_FUNCTION_TABLE;
    using DH_KEY_BLOB = _BCRYPT_DH_KEY_BLOB;
    using DH_PARAMETER_HEADER = _BCRYPT_DH_PARAMETER_HEADER;
    using DSA_KEY_BLOB = _BCRYPT_DSA_KEY_BLOB;
    using DSA_KEY_BLOB_V2 = _BCRYPT_DSA_KEY_BLOB_V2;
    using DSA_PARAMETER_HEADER = _BCRYPT_DSA_PARAMETER_HEADER;
    using DSA_PARAMETER_HEADER_V2 = _BCRYPT_DSA_PARAMETER_HEADER_V2;
    using ECC_CURVE_NAMES = _BCRYPT_ECC_CURVE_NAMES;
    using ECC_PARAMETER_HEADER = _BCRYPT_ECC_PARAMETER_HEADER;
    using ECCFULLKEY_BLOB = _BCRYPT_ECCFULLKEY_BLOB;
    using ECCKEY_BLOB = _BCRYPT_ECCKEY_BLOB;
    using HASH_FUNCTION_TABLE = _BCRYPT_HASH_FUNCTION_TABLE;
    using HASH_HEADER = _BCRYPT_HASH_HEADER;
    using HASH_TO_SYMCRYPT = _BCRYPT_HASH_TO_SYMCRYPT;
    using INTERFACE_VERSION = _BCRYPT_INTERFACE_VERSION;
    using KEY_BLOB = _BCRYPT_KEY_BLOB;
    using KEY_DATA_BLOB_HEADER = _BCRYPT_KEY_DATA_BLOB_HEADER;
    using KEY_DERIVATION_FUNCTION_TABLE = _BCRYPT_KEY_DERIVATION_FUNCTION_TABLE;
    using KEY_HEADER = _BCRYPT_KEY_HEADER;
    using KEY_LENGTHS_STRUCT = __BCRYPT_KEY_LENGTHS_STRUCT;
    using MULTI_HASH_OPERATION = _BCRYPT_MULTI_HASH_OPERATION;
    using MULTI_OBJECT_LENGTH_STRUCT = _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT;
    using OAEP_PADDING_INFO = _BCRYPT_OAEP_PADDING_INFO;
    using OBJECT_HEADER = _BCRYPT_OBJECT_HEADER;
    using OID = _BCRYPT_OID;
    using OID_LIST = _BCRYPT_OID_LIST;
    using PKCS1_PADDING_INFO = _BCRYPT_PKCS1_PADDING_INFO;
    using PROVIDER_NAME = _BCRYPT_PROVIDER_NAME;
    using PSS_PADDING_INFO = _BCRYPT_PSS_PADDING_INFO;
    using RNG_FUNCTION_TABLE = _BCRYPT_RNG_FUNCTION_TABLE;
    using RSAKEY_BLOB = _BCRYPT_RSAKEY_BLOB;
    using SECRET_AGREEMENT_FUNCTION_TABLE = _BCRYPT_SECRET_AGREEMENT_FUNCTION_TABLE;
    using SECRET_HEADER = _BCRYPT_SECRET_HEADER;
    using SIGNATURE_FUNCTION_TABLE = _BCRYPT_SIGNATURE_FUNCTION_TABLE;
}

namespace Ncrypt {
    using SSL_CIPHER_LENGTHS = _NCRYPT_SSL_CIPHER_LENGTHS;
    using SSL_CIPHER_SUITE = _NCRYPT_SSL_CIPHER_SUITE;
    using SSL_ECC_CURVE = _NCRYPT_SSL_ECC_CURVE;
    using SSL_FUNCTION_TABLE = _NCRYPT_SSL_FUNCTION_TABLE;
    using SSL_HASH = _NCRYPT_SSL_HASH;
    using SSL_KEY = _NCRYPT_SSL_KEY;
    using SSL_PROVIDER = _NCRYPT_SSL_PROVIDER;

    using AES_GCM_PARAMETERS = NCRYPT_AES_GCM_PARAMETERS;
    using ALGORITHM_IDENTIFIER = NCRYPT_ALGORITHM_IDENTIFIER;
    using AlgorithmName = _NCryptAlgorithmName;
    using ALLOC_PARA = NCRYPT_ALLOC_PARA;
    using ATTR_TYPE_VALUE = NCRYPT_ATTR_TYPE_VALUE;
    using ATTRIBUTE = NCRYPT_ATTRIBUTE;
    using BIT_BLOB = NCRYPT_BIT_BLOB;
    using CACHED_PROVIDER = _CACHED_NCRYPT_PROVIDER;
    using CMS_COMBINER_RECIPIENT_INFO = NCRYPT_CMS_COMBINER_RECIPIENT_INFO;
    using CMS_CONTENT_INFO = NCRYPT_CMS_CONTENT_INFO;
    using CMS_ENCRYPTED_CONTENT_INFO = NCRYPT_CMS_ENCRYPTED_CONTENT_INFO;
    using CMS_ENVELOPED_DATA = NCRYPT_CMS_ENVELOPED_DATA;
    using CMS_ENVELOPED_ENCODE_INFO = NCRYPT_CMS_ENVELOPED_ENCODE_INFO;
    using CMS_KEK_ENCODE_INFO = NCRYPT_CMS_KEK_ENCODE_INFO;
    using CMS_KEK_RECIPIENT_INFO = NCRYPT_CMS_KEK_RECIPIENT_INFO;
    using CMS_KEY_AGREE_ENCODE_INFO = NCRYPT_CMS_KEY_AGREE_ENCODE_INFO;
    using CMS_KEY_AGREE_RECIPIENT_INFO = NCRYPT_CMS_KEY_AGREE_RECIPIENT_INFO;
    using CMS_KEY_TRANS_ENCODE_INFO = NCRYPT_CMS_KEY_TRANS_ENCODE_INFO;
    using CMS_KEY_TRANS_RECIPIENT_INFO = NCRYPT_CMS_KEY_TRANS_RECIPIENT_INFO;
    using CMS_ORIGINATOR_IDENTIFIER = NCRYPT_CMS_ORIGINATOR_IDENTIFIER;
    using CMS_ORIGINATOR_INFO = NCRYPT_CMS_ORIGINATOR_INFO;
    using CMS_OTHER_RECIPIENT_INFO = NCRYPT_CMS_OTHER_RECIPIENT_INFO;
    using CMS_PASSWORD_RECIPIENT_INFO = NCRYPT_CMS_PASSWORD_RECIPIENT_INFO;
    using CMS_RECIPIENT_ENCODE_INFO = NCRYPT_CMS_RECIPIENT_ENCODE_INFO;
    using CMS_RECIPIENT_ENCRYPTED_KEY = NCRYPT_CMS_RECIPIENT_ENCRYPTED_KEY;
    using CMS_RECIPIENT_IDENTIFIER = NCRYPT_CMS_RECIPIENT_IDENTIFIER;
    using CMS_RECIPIENT_INFO = NCRYPT_CMS_RECIPIENT_INFO;
    using CMS_RECIPIENT_KEY_IDENTIFIER = NCRYPT_CMS_RECIPIENT_KEY_IDENTIFIER;
    using DESCRIPTOR_HANDLE = NCRYPT_DESCRIPTOR_HANDLE;
    using DESCRIPTOR_OBJECT = NCRYPT_DESCRIPTOR_OBJECT;
    using EXPORTED_ISOLATED_KEY_ENVELOPE = _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;
    using EXPORTED_ISOLATED_KEY_HEADER = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
    using ISOLATED_KEY_ATTESTED_ATTRIBUTES = _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;
    using ISSUER_SERIAL_NUMBER = NCRYPT_ISSUER_SERIAL_NUMBER;
    using KEY_ACCESS_POLICY_BLOB = __NCRYPT_KEY_ACCESS_POLICY_BLOB;
    using KEY_ATTEST_PADDING_INFO = _NCRYPT_KEY_ATTEST_PADDING_INFO;
    using KEY_BLOB_HEADER = _NCRYPT_KEY_BLOB_HEADER;
    using KEY_PROTECTION_FUNCTION_TABLE = _NCRYPT_KEY_PROTECTION_FUNCTION_TABLE;
    using KEY_STORAGE_FUNCTION_TABLE = _NCRYPT_KEY_STORAGE_FUNCTION_TABLE;
    using KeyName = NCryptKeyName;
    using MSG_HANDLE = NCRYPT_MSG_HANDLE;
    using NAME_VALUE = NCRYPT_NAME_VALUE;
    using NAME_VALUE_AND_COMBINE = NCRYPT_NAME_VALUE_AND_COMBINE;
    using NAME_VALUE_AND_COMBINER = NCRYPT_NAME_VALUE_AND_COMBINER;
    using PCP_HMAC_AUTH_SIGNATURE_INFO = __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO;
    using PCP_RAW_POLICYDIGEST = __NCRYPT_PCP_RAW_POLICYDIGEST;
    using PCP_TPM_FW_VERSION_INFO = __NCRYPT_PCP_TPM_FW_VERSION_INFO;
    using PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
    using PLATFORM_ATTEST_PADDING_INFO = _NCRYPT_PLATFORM_ATTEST_PADDING_INFO;
    using PROTECT_SETTINGS_INFO = NCRYPT_PROTECT_SETTINGS_INFO;
    using PROTECT_STREAM_INFO = NCRYPT_PROTECT_STREAM_INFO;
    using PROTECT_STREAM_INFO_EX = NCRYPT_PROTECT_STREAM_INFO_EX;
    using PROTECTION_DESCRIPTOR_INFO = NCRYPT_PROTECTION_DESCRIPTOR_INFO;
    using PROTECTOR_HANDLE = NCRYPT_PROTECTOR_HANDLE;
    using PROTPROV_HANDLE = NCRYPT_PROTPROV_HANDLE;
    using PROVIDER_CACHE = _NCRYPT_PROVIDER_CACHE;
    using ProviderName = NCryptProviderName;
    using PUBLIC_KEY_INFO = NCRYPT_PUBLIC_KEY_INFO;
    using REG_VALUE_DEF = NCRYPT_REG_VALUE_DEF;
    using ROUTER_KEY = _NCRYPT_ROUTER_KEY;
    using ROUTER_PROVIDER = _NCRYPT_ROUTER_PROVIDER;
    using ROUTER_SECRET = _NCRYPT_ROUTER_SECRET;
    using SET_OF_ANY = NCRYPT_SET_OF_ANY;
    using STREAM_HANDLE = NCRYPT_STREAM_HANDLE;
    using STREAM_OBJECT = NCRYPT_STREAM_OBJECT;
    using SUPPORTED_LENGTHS = __NCRYPT_SUPPORTED_LENGTHS;
    using TPM_LOADABLE_KEY_BLOB_HEADER = NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;
    using TPM_PLATFORM_ATTESTATION_STATEMENT = _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT;
    using UI_POLICY = __NCRYPT_UI_POLICY;
    using UI_POLICY_BLOB = __NCRYPT_UI_POLICY_BLOB;
    using VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
    using VSM_KEY_ATTESTATION_STATEMENT = _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
}
#endif